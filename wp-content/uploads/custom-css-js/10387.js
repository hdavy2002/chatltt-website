/******* Do not edit this file *******
Simple Custom CSS and JS - by Silkypress.com
Saved: Aug 28 2024 | 07:07:09 */
// Create a container for external content
const externalContentContainer = document.createElement('div');
externalContentContainer.id = 'external-content';
externalContentContainer.style.position = 'fixed';
externalContentContainer.style.top = '0';
externalContentContainer.style.left = '0';
externalContentContainer.style.width = '100%';
externalContentContainer.style.height = '100%';
externalContentContainer.style.backgroundColor = 'white';
externalContentContainer.style.zIndex = '9999';
externalContentContainer.style.display = 'none';
document.body.appendChild(externalContentContainer);

// Intercept all link clicks
document.addEventListener('click', function(event) {
  if (event.target.tagName === 'A') {
    event.preventDefault();
    const href = event.target.getAttribute('href');
    handleNavigation(href);
  }
});

function handleNavigation(url) {
  if (isExternalUrl(url)) {
    // Show loading indicator
    showLoading();
    
    // Fetch the external content
    fetch(url)
      .then(response => response.text())
      .then(html => {
        // Create a temporary element to parse the HTML
        const tempElement = document.createElement('div');
        tempElement.innerHTML = html;
        
        // Extract the body content
        const bodyContent = tempElement.querySelector('body').innerHTML;
        
        // Update the external content container
        externalContentContainer.innerHTML = bodyContent;
        externalContentContainer.style.display = 'block';
        
        // Update the browser's address bar
        window.history.pushState({}, '', url);
        
        // Hide loading indicator
        hideLoading();
      })
      .catch(error => {
        console.error('Error fetching page:', error);
        hideLoading();
        // Optionally handle the error (e.g., show an error message to the user)
      });
  } else {
    // Handle internal navigation (if needed)
    window.location.href = url;
  }
}

function isExternalUrl(url) {
  const currentOrigin = window.location.origin;
  return !url.startsWith(currentOrigin) && !url.startsWith('/');
}

function showLoading() {
  // Implement a loading indicator here
}

function hideLoading() {
  // Hide the loading indicator
}

// Handle back button
window.addEventListener('popstate', function() {
  if (externalContentContainer.style.display === 'block') {
    externalContentContainer.style.display = 'none';
  }
});